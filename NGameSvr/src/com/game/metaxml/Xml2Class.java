package com.game.metaxml;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

/**
 * xml 转 class 
 * @author zgt
 * 
  <?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
  <metalib name="" tagsetversion="1" version="2749">
  <macro name="TAKS_AREA_STOP_TIME"     value="3" desc="探索任务区域停留时间单位秒" />
  <!-- 注解 -->
  <struct name="Armdef" desc="装备  该类可以和 xml 互转 " annotation="javax.xml.bind.annotation.XmlRootElement">
	   <entry name="ID" type="int" />
	   <entry name="name" type="String" />
	   <!-- count 是集合 -->
	   <entry name="RlMoney" type="RlMoneyInfo" count="MAX_ARM_NUM" />
	   
	   <entry name="RecastMoney" type="RecastMoneyInfo" />
	   
	</struct>
  <struct name="BoonAddEvent" version="1999">
		<entry name="ID" type="tinyuint" desc="取值为BOON_ADD_TYPE" />
		<entry name="Per" type="tinyint" desc="加成百分比" />
		<entry name="Time" type="uint" desc="时间" />
	</struct>
  </metalib>  
 *
 */
public class Xml2Class {
	
	private final String HEADTemplate = "/********************************************************************\n"+
										"**       This java file is generated by program,                   **\n"+
										"**            Please do not change it directly.                    **\n"+
										"********************************************************************/\n\n\n";
	
	public final String PackageTemplate = "package %s;\n\n";
	
	public final String ImprotTemplate = "import java.util.ArrayList;\n\n";
									  
	public final String ClassAnnotationTemplate = "\t@%s\n";
	
	public final String AnnotationTemplate = "\t/** %s */\n";
	
	public final String BaseClassTemplate = "public final class %s {\n \tprivate %s(){}\n";
	
	public final String PropertyTemplate = "\tpublic static %s  %s  = %s;\n";
	
	public final String SubClassTemplate = "\tpublic final static class %s  implements java.io.Serializable {\n \t\tpublic %s(){}\n";
	
	public final String SubPropertyTemplate = "\t\tprivate  %s  %s;\n";
	public final String SubPropertyTemplate2 = "\t\tprivate  %s  %s = %s;\n";
	
	public final String SubGetPropertyTemplate = "\t\tpublic %s get%s(){\n\t\t\treturn this.%s;\n\t\t}\n";
	public final String SubSetPropertyTemplate = "\t\tpublic void set%s(%s %s){\n\t\t\tthis.%s = %s;\n\t\t}\n";
	
	
	//list
	public final String SubListPropertyTemplate = "\t\tprivate  ArrayList<%s>  %s;\n";
	public final String SubListGetPropertyTemplate = "\t\tpublic ArrayList<%s> get%s(){\n\t\t\treturn this.%s;\n\t\t}\n";
	public final String SubListSetPropertyTemplate = "\t\tpublic void set%s(ArrayList<%s> %s){\n\t\t\tthis.%s = %s;\n\t\t}\n";
	
	
	public final String SubEnumTemplate = "\tpublic static enum %s {\n";
	
	public final String LasthTag = "\n}";
	
	
	private String filePath;
	
	private String BaseClassName;
	
	private File file;
	
	private BufferedWriter writer;
	
	private Element root;
	
	public Xml2Class(String filePath){
		this.filePath = filePath;
		BaseClassName = getBaseClassName();
		file = careteFile();
		try {
			writer = new BufferedWriter(new FileWriter(file));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		root = loadXml().getRootElement();
		
		try {
			init();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public String getBaseClassName(){
		int lastIndex = filePath.lastIndexOf(File.separator);
		int lastIndex2 = filePath.lastIndexOf(".");
		String name = filePath.substring(lastIndex+1,lastIndex2);
		return name;
	}
	
	public File careteFile(){
		int lastIndex = filePath.lastIndexOf(File.separator);
		String name = filePath.substring(0,lastIndex+1)+BaseClassName+".java";
		File file = new File(name);
		if (!file.exists()){
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return file;
	}
	
	public Document loadXml(){
		SAXReader saxReader = new SAXReader();   
		Document doc = null;
		try {
			FileInputStream in = new FileInputStream(this.filePath);
			doc = saxReader.read(in);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return doc;
	}
	
	
	public void getNodes(Element element,BufferedWriter writer) throws Exception{  
		 
		if (element.getName().equals("metalib")) {
			
			String packageName = element.attributeValue("package");
			if (packageName!=null) {
				writer.write(String.format(PackageTemplate, packageName));
			}
			
			writer.write(ImprotTemplate);
			
			String baseClass = String.format(BaseClassTemplate, BaseClassName,BaseClassName);
			writer.write(baseClass);
			
			
			
			
		}
		
		
	    @SuppressWarnings("unchecked")
		List<Element> listElement=element.elements();//所有一级子节点的list  
	    for(Element e:listElement){//遍历所有一级子节点  
	    	Element node = e;
			if (node.getName().equals("macro")) {
				String name = node.attributeValue("name");
				String value = node.attributeValue("value");
				String desc = node.attributeValue("desc");
				String type = node.attributeValue("type");
				if (desc!=null) {
					writer.write(String.format(AnnotationTemplate, desc));
				}
				if (type == null) {
					type = "int";
				}
				String property = String.format(PropertyTemplate,type, name,value);
				writer.write(property);
			}
			
			//枚举
			if (node.getName().equals("macrosgroup")) {
				
				String enumdesc = node.attributeValue("desc");
				if (enumdesc!=null) {
					writer.write(String.format(AnnotationTemplate, enumdesc));
				}
				String enumName = node.attributeValue("name");
				writer.write(String.format(SubEnumTemplate, enumName));
				
				List<Element> enumElement=node.elements();
				for(Element entry:enumElement){
					
					String name = entry.attributeValue("name");
					String desc = entry.attributeValue("desc");
					String value = entry.attributeValue("value");
					if (desc == null) {
						desc = "";
					}
					
					String subProperty = "\t\t"+"/**"+desc+"*/\n\t\t"+name+",\n";
					writer.write(subProperty);
					
				}
				
				writer.write("\n\t}\n");
			}
			
			//结构体
			if (node.getName().equals("struct")) {
				String structdesc = node.attributeValue("desc");
				if (structdesc!=null) {
					writer.write(String.format(AnnotationTemplate, structdesc));
				}
				String classAnnotation = node.attributeValue("annotation");
				if (classAnnotation!=null) {
					writer.write(String.format(ClassAnnotationTemplate, classAnnotation));
				}
				
				String structName = node.attributeValue("name");
				writer.write(String.format(SubClassTemplate, structName,structName));
				@SuppressWarnings("unchecked")
				//属性 entry
				List<Element> entryElement=node.elements();
				for(Element entry:entryElement){
					String name = entry.attributeValue("name");
					String type = entry.attributeValue("type");
					String desc = entry.attributeValue("desc");
					String value = entry.attributeValue("value");
					String count = entry.attributeValue("count");
					String annotation = entry.attributeValue("annotation");
					if (desc!=null) {
						writer.write(String.format("\t"+AnnotationTemplate, desc));
					}
					if (annotation!=null) {
						writer.write(String.format("\t"+ClassAnnotationTemplate, annotation));
					}
					
					if (count!=null) {
						String subProperty = String.format(SubListPropertyTemplate, type,name);
						writer.write(subProperty);
						
					}else if (value!=null) {

						if (type.equals("String")) {
						    value = "\""+value+"\"";
					    }else if (isBaseType(type) == false) {
							value =String.format(" new %s()",type);
						}
						
						String subProperty = String.format(SubPropertyTemplate2, type,name,value);
						writer.write(subProperty);
					}else {
						String subProperty = String.format(SubPropertyTemplate, type,name);
						writer.write(subProperty);
					}
					
				}
				for(Element entry:entryElement){
					String name = entry.attributeValue("name");
					String type = entry.attributeValue("type");
					String count = entry.attributeValue("count");
					String captureName = captureName(name);
					
					if (count!=null) {
						String subGetProperty = String.format(SubListGetPropertyTemplate, type,captureName,name);
						writer.write(subGetProperty);
						String subSetProperty = String.format(SubListSetPropertyTemplate,captureName,type,name,name,name);
						writer.write(subSetProperty);
					}else {
						String subGetProperty = String.format(SubGetPropertyTemplate, type,captureName,name);
						writer.write(subGetProperty);
						String subSetProperty = String.format(SubSetPropertyTemplate,captureName,type,name,name,name);
						writer.write(subSetProperty);
					}
					
					
					
				}
				writer.write("\n\t}\n");
			}
	      
	    }
	    
	    writer.write(LasthTag);
	} 
	
	public void init() throws Exception{
		writer.write(HEADTemplate);
		getNodes(root,writer);
		
		writer.flush();
		writer.close();
	}
	
	/**
	 * 判断是基本类型
	 * @param type
	 * @return
	 */
	private boolean isBaseType(String type){
		boolean b = false;
		String [] baseTypes = new String[]{"byte","short","int","long","float","double","boolean","char"};
		for (String string : baseTypes) {
			if (string.equals(type)) {
				b = true;
			}
		}
		return b;
	}
	
	public static String captureName(String name) {
        name = name.substring(0, 1).toUpperCase() + name.substring(1);
        return  name;
	}
	
	public static void main(String[] args) {
		
		String BaseFilePath = "E:\\xiangtoneWork\\NGameSvr\\NGameSvr\\src\\com\\game\\metaxml\\";
		
		String file[] = new String[]{"ProtoComm.xml","ResdbMeta.xml","ProtoCs.xml"}; 
		
		ArrayList<String> filePathArr = new ArrayList<>();
		
		for (int i = 0; i < file.length; i++) {
			filePathArr.add(BaseFilePath + file[i]);
		}
		
		for (String filePath : filePathArr) {
			Xml2Class xml2Class = new Xml2Class(filePath);
			System.out.println("类名:"+xml2Class.getBaseClassName());
		}
		System.out.println("转化完成");
		
		
	}

}
